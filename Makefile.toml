[config]
# Don't use cargo-make's default tasks
skip_core_tasks = true
# Don't run tasks in every workspace by defautl
default_to_workspace = false

# ------------------------
# HELP
# ------------------------
[tasks.help]
category = "Help"
description = "List all tasks"
command = "cargo"
args = ["make", "--list-all-steps", "--quiet"]

# ------------------------
# Install
# ------------------------
[tasks.install]
category = "Install"
description = "Install dependencies"
dependencies = ["install-tailwind", "install-sea"]


[tasks.install-sea]
category = "Install"
description = "Installs sea-orm-cli"
command = "cargo"
args = ["install", "sea-orm-cli"]

[tasks.install-tailwind]
category = "Install"
description = "Install tailwindcss"
dependencies = ["download-tailwlind", "chmod-tailwind", "rename-tailwind"]

[tasks.download-tailwlind]
category = "Install"
command = "curl"
args = [
  "-sLO",
  "https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-arm64",
]

[tasks.chmod-tailwind]
category = "Install"
command = "chmod"
args = ["+x", "tailwindcss-macos-arm64"]

[tasks.rename-tailwind]
category = "Install"
command = "mv"
args = ["tailwindcss-macos-arm64", "tailwindcss"]

# ------------------------
# Development
# ------------------------
[tasks.watch]
category = "Development"
description = "Watch mode development"
run_task = { name = ["server-watch", "styles-watch"], parallel = true }

[tasks.styles-watch]
category = "Development"
description = "Run tailwindcss in watch mode"
command = "./tailwindcss"
args = [
  "--config",
  "tailwind.config.js",
  "--input",
  "static/input.css",
  "--output",
  "static/styles.css",
  "--watch",
]

[tasks.server-watch]
category = "Development"
command = "cargo"
env = { RUST_LOG = "trace", RUST_BACKTRACE = "full" }
args = ["watch", "-x", "r"]


# ------------------------
# Build
# ------------------------
[tasks.build]
category = "Build"
description = "Build locally"
run_task = { name = ["styles", "server"] }

[tasks.styles]
category = "Build"
description = "Build tailwindcss for locally"
command = "./tailwindcss"
args = [
  "--minify",
  "--config",
  "tailwind.config.js",
  "--input",
  "static/input.css",
  "--output",
  "static/styles.css",
]

[tasks.server]
category = "Build"
description = "Build the server for release locally"
command = "cargo"
args = ["build", "--release"]

# ------------------------
# Release
# ------------------------
[tasks.release]
category = "Release"
description = "Build the application for release (run inside Docker)"
run_task = { name = ["styles", "rm-css", "server-release", "rename-release"] }

[tasks.server-release]
category = "Release"
description = "Build the server for alpine (run inside Docker)"
command = "cargo"
args = ["build", "--release"]

[tasks.rename-release]
category = "Release"
description = "Rename the release binary (run inside Docker)"
command = "mv"
args = ["./target/release/rolo", "./rolo"]

[tasks.rm-css]
category = "Release"
description = "Remove input.css (run inside Docker)"
command = "rm"
args = ["static/input.css"]


# ------------------------
# Database
# ------------------------
[tasks.migrate]
env_files = [
  { path = ".env.dev", profile = "development" },
  { path = ".env.docker", profile = "docker" },
]
category = "Database"
description = "Run migration"
command = "sea"
args = ["migrate", "${@}"]


[tasks.generate]
env_files = [
  { path = ".env.dev", profile = "development" },
  { path = ".env.docker", profile = "docker" },
]
category = "Database"
description = "Generate an entity"
command = "sea"
args = [
  "generate",
  "entity",
  "--output-dir",
  "./entity/src/entities",
  "--with-serde",
  "both",
  "--date-time-crate",
  "time",
]

# ------------------------
# Tests
# ------------------------
[tasks.test-all]
env_files = [
  { path = ".env.dev", profile = "development" },
  { path = ".env.docker", profile = "docker" },
]
category = "Tests"
description = "Run tests in all crates"
command = "cargo"
args = ["pt", "--workspace"]
