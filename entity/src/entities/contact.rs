//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "contact")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub formatted_name: String,
    pub birthday: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub photo: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::contact_interaction::Entity")]
    ContactInteraction,
    #[sea_orm(has_many = "super::interval::Entity")]
    Interval,
}

impl Related<super::contact_interaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContactInteraction.def()
    }
}

impl Related<super::interval::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Interval.def()
    }
}

impl Related<super::interaction::Entity> for Entity {
    fn to() -> RelationDef {
        super::contact_interaction::Relation::Interaction.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contact_interaction::Relation::Contact.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
