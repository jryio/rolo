//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "interactions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub date_time: String,
    pub description: Option<String>,
    pub r#type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::contact_interactions::Entity")]
    ContactInteractions,
}

impl Related<super::contact_interactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContactInteractions.def()
    }
}

impl Related<super::contacts::Entity> for Entity {
    fn to() -> RelationDef {
        super::contact_interactions::Relation::Contacts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::contact_interactions::Relation::Interactions
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
